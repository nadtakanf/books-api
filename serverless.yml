service: books-api

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "us-east-1"}
  profile: ${opt:profile, "nadtakan"}
  environment:
    booksTableName: ${self:custom.booksTableName}-${self:provider.stage}-${self:provider.region}
  #giving lambda to invoke dynamodb
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:*"

# custom values section
custom:
  booksTableName: books-${self:provider.stage}
  cognitoStackName: cognito

plugins:
  - serverless-pseudo-parameters #this plug in is helping getting useful parameters

functions:
  # Defines an HTTP API endpoint that calls the main function in book/create.js
  # - path: url path is /books
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using Cognito
  book-create:
    handler: src/book/create.handler
    events:
      - http:
          path: books
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:cognito-${self:provider.region}-user-pool-id}
            
  # Defines an HTTP API endpoint that calls the main function in book/get.js
  # - path: url path is /books/{ISBN}
  # - method: GET request
  # - authorizer: authenticate using Cognito
  book-get:
    handler: src/book/get.handler
    events:
      - http:
          path: books/{ISBN}
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:cognito-${self:provider.region}-user-pool-id}


  # Defines an HTTP API endpoint that calls the main function in list.js
  # - path: url path is /books
  # - method: GET request
  # - authorizer: authenticate using Cognito
  book-list:
    handler: src/book/list.handler
    events:
      - http:
          path: books
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:cognito-${self:provider.region}-user-pool-id}

  # Defines an HTTP API endpoint that calls the main function in delete.js
  # - path: url path is /books/{ISBN}
  # - method: DELETE request
  # - authorizer: authenticate using Cognito
  book-update:
    handler: src/book/update.handler
    events:
      - http:
          path: books/{ISBN}
          method: put
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:cognito-${self:provider.region}-user-pool-id}

  book-delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /books/{id}
    # - method: DELETE request
    # - authorizer: authenticate using Cognito
    handler: src/book/delete.handler
    events:
      - http:
          path: books/{ISBN}
          method: delete
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${ssm:cognito-${self:provider.region}-user-pool-id}
